# MIDI

::: {.callout-note}
# Goal
Be able to name use cases for MIDI. Translate MIDI numbers to pitches.
:::

We have seen last week that the fundamental frequency of complex tones 
roughly corresponds to what we perceive as pitch. For many musical styles, 
pitch is one of the most fundamental components, as it is used to construct 
melodies and harmonies. 

Given the (fundamental) frequency $f$ of some tone, we can calculate its
corresponding MIDI pitch number by making use of a reference note.
This is usually A4 in Scientific Pitch Notation, and with a frequency of 440 Hz.

So the frequency of that A4 is given by 
$$f = 440 \times 2^{(m-69)/12}$$

In Python, we can write a simple calculation to do this for any given MIDI number:

```{python}
def MIDI2frequency(m: int, K: float = 440.0) -> int:
    f = K * 2 ** ((m - 69) / 12)
    return f
```

If we wanted to know the frequency of the note C5 (MIDI pitch 73), we could simply write: 

```{python}
f_C5 = MIDI2frequency(73)
print(f_C5)
```

With the invention of electronic instruments in the 20th century, 
and the possibility of representing continuous sounds as digital signals, 
it became important for those instruments to interact and communicate. 
This led to the development of the Musical Instruments Digital Interface (MIDI)
format that is still a cornerstone for music information exchange.

MIDI is relatively simple: it consists of so-called messages that have five components:

- Time (in ticks)
- Message (either NOTE ON or NOTE OFF)
- Channel (up to 16 for classical MIDI)
- Note number (integers between 0 and 127)
- Velocity (simulating the speed of pressing down a key, proxy for volume)

In that way, MIDI resembles the much older 'piano roll' representation for musical notes.

_ADD PIANO ROLL IMAGE HERE_

Exercise:

- Transcribe simple melody to MIDI and plot using `pypianoroll`. 
- Download multitrack MIDI from the internet and visualize. 
- Describe what can be read from a pianoroll visualization, and what is missing.
